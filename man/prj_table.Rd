% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prj_table.R
\name{prj_table}
\alias{prj_table}
\alias{prj_gt}
\title{Project a table}
\usage{
prj_table(.data, .cols = list())

prj_gt(
  .data,
  .cols = list(),
  rowgroup_col = "row_spanner",
  rowname_col = "rows",
  ...
)
}
\arguments{
\item{.data}{A dataframe, ideally one containing \code{projectable_col}s}

\item{.cols}{A named list. Each name should  be the name of a column in
\code{.data}; each value should be a named character vector containing glue-like
specifications for the output columns.}

\item{rowgroup_col}{The name of a column in \code{.data} to group rows by; if
\code{NULL} no grouping will be used.}

\item{rowname_col}{The name of a column in \code{.data} to take as the row labels;
if \code{NULL} no row labels will be applied}

\item{...}{Additional arguments to pass on to \code{gt::gt()}}
}
\value{
a \code{projection} object
}
\description{
The \code{prj_table()} function is designed to take in a dataframe made up of
\code{projectable_col}s, and to 'project' it into an ordinary dataframe as per the
instructions provided in the \code{shadow} attribute of each column. The
\code{prj_gt()} function does the same thing, but initialises a \code{gt} object for
display.
}
\details{
The \code{shadow} attribute of each column can be set via the \code{.cols} argument of
\code{prj_table()} or by using the \code{prj_shadow_if()} and \code{prj_shadow_at()} helper
functions.

The \code{projection} output will also come attached with metadata which keeps
track of which columns in the output belong to which columns in the input.
}
\examples{
# Create a table made up of `projectable_col`s
my_tbl <- set_table(
  .data = mtcars,
  .rows = list(
    Cylinders = cyl,
    Transmission = list(Automatic = am \%in\% 0, Manual = am \%in\% 1)
  ),
  .cols = list(
    `V-Shaped` = col_freq(n = vs \%in\% 1, N = vs \%in\% 0:1),
    `Not V-shaped` = col_freq(n = vs \%in\% 0, N = vs \%in\% 0:1)
  )
)

# Project it back into an ordinary dataframe
prj_table(my_tbl, list(
  `V-Shaped` = "{signif(p, 2)} ({n})",
  `Not V-shaped` = "{signif(p, 2)} ({n})"
))

# Produce a `gt` display object
prj_gt(my_tbl, list(
  `V-Shaped` = "{signif(p, 2)} ({n})",
  `Not V-shaped` = "{signif(p, 2)} ({n})"
))

}
